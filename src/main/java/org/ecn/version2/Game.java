package org.ecn.version2;

import lombok.Data;

@Data
public class Game {
    private Plateau plateau;
    private Combination combination;
    private String firstPlayerName;
    private String secondPlayerName;
    private int firstPlayerScore;
    private int secondPlayerScore;

    public Game(String firstPlayerName, String secondPlayerName) {
        this.plateau = new Plateau();
        this.combination = new Combination();
        this.firstPlayerScore = 0;
        this.secondPlayerScore = 0;
        this.firstPlayerName = firstPlayerName;
        this.secondPlayerName = secondPlayerName;
    }

    public static RunResults playOneRun(Combination combination, Plateau plateau, String playerName) {
        RunResults runResults = new RunResults();
        combination.reset();
        plateau.reset();
        System.out.println("You have to guess combination generated by computer.");
        combination.generateCombination();
        System.out.print("Printing combination for learning purpose: ");
        System.out.println(combination.getCombination());
        while (runResults.getRounds() < 12) {
            System.out.println(playerName + "'s turn to guess combination:");
            Player decoder = new Player();
            decoder.guessCombination();
            String markers = combination.checkCombination(decoder.getGuess());
            plateau.addRow(decoder.getGuess(), markers);
            plateau.display();
            if (markers.equals("bbbb")) {
                runResults.setSummaryInfo(playerName + " won!");
                runResults.incrementScore();
                runResults.setWin(true);
                break;
            }
            runResults.incrementRounds();
        }
        return runResults;
    }
    public void play() {
        int round = 0;
        String currentPlayer;
        RunResults runResults = new RunResults();
        while (true) {
            if (round % 2 == 0) {
                currentPlayer = this.getFirstPlayerName();
            } else {
                currentPlayer = this.getSecondPlayerName();
            }
            runResults = playOneRun(this.getCombination(),this.getPlateau(),  currentPlayer);
            System.out.println(runResults.getSummaryInfo());
            if (currentPlayer.equals(this.getFirstPlayerName())) {
                firstPlayerScore += runResults.getScore();
            } else {
                secondPlayerScore += runResults.getScore();
            }

            round++;
            System.out.println("Current score for " + this.getFirstPlayerName() + " : " + this.getFirstPlayerScore());
            System.out.println("Current score for " + this.getSecondPlayerName() + " : " + this.getSecondPlayerScore());

        }
    }
}
